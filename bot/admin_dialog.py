from aiogram_dialog import Dialog, Window
from bot_instans import dp, bot_storage_key
from aiogram_dialog.widgets.text import Const
from aiogram_dialog.widgets.kbd import Button, Row, Next, Cancel
from aiogram_dialog.widgets.input import MessageInput
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import DialogManager
import pickle
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ContentType
import asyncio
import translators
from requests.exceptions import HTTPError
from aiogram.exceptions import TelegramForbiddenError
from postgres_functions import return_user_wanted_spam

class ADMIN(StatesGroup):
    first = State()
    accept_msg = State()
    admin_send_msg = State()

async def button_zagruz_db(callback: CallbackQuery, widget: Button, dialog_manager: DialogManager, *args, **kwargs):
    with open('save_db.pkl', 'rb') as file:
        recover_base = pickle.load(file)
        # print('ZAGRUZ recover base = ', recover_base)
        await dp.storage.set_data(key=bot_storage_key, data=recover_base)
    await callback.message.answer('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ !')
    await dialog_manager.done()  # –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞


async def button_save_db(callback: CallbackQuery, widget: Button, dialog_manager: DialogManager, *args, **kwargs):
    bot_dict = await dp.storage.get_data(key=bot_storage_key)  # –ü–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å –±–æ—Ç–∞
    with open('save_db.pkl', 'wb') as file:
        pickle.dump(bot_dict, file)
    await callback.message.answer('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ !')
    await dialog_manager.done()  # –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞

async def accepet_admin_message(msg:Message, widget: MessageInput, dialog_manager: DialogManager, *args, **kwargs):
    dialog_manager.dialog_data['admin_msg'] = msg.text
    await dialog_manager.next()

async def message_sender(slovo:str, lan:str, temp_dict:dict)->str:
    if lan != 'en':
        try:
            if lan not in temp_dict:
                res = translators.translate_text(query_text=slovo, from_language='en', to_language=lan, translator='alibaba')
                temp_dict[lan]=res
            else:  # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –µ—Å—Ç—å - —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏ —Å–Ω–æ–≤–∞
                res = temp_dict[lan]
        except AttributeError:
                print('\n\n –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ AttributeError')
                res = 'Es ist ein Fehler aufgetreten, versuchen Sie bitte noch mal'
        except HTTPError:
            print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ HTTPError:\n\n')
            res = slovo
        except Exception as err:
            print(f'Other error occurred: {err}')
            res = slovo
    else:
        res = slovo
    return res

async def sending_msg(cb:CallbackQuery, widget: Button, dialog_manager: DialogManager, *args, **kwargs):
        temp_dict = {}
        text_from_admin = dialog_manager.dialog_data['admin_msg']
        if text_from_admin.startswith('one'):
            prefix, us_id, text_msg = text_from_admin.split('$')
            user_id = int(us_id)
            try:
                await cb.bot.send_message(chat_id=user_id, text=text_msg)
                await cb.message.answer('Message is sent !')
            except Exception as e:
                await cb.message.answer(f'Msg is not sent due to {e}')
            await dialog_manager.done()
        else:
            spam_list = await return_user_wanted_spam()  # –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –∫ –ø–æ—Å—Ç–≥—Ä–µ—Å—É [(66234524532, 'ru'), (63234524532, 'ru')]
            for us_tuple in spam_list:  # us_tuple =  (66234524532, 'ru')
                lan = us_tuple[1]
                # print('lan = ', lan)
                chat_id = us_tuple[0]
                if not text_from_admin.startswith('üî∏'):  # –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞
                    spam = await message_sender(text_from_admin[1:], lan, temp_dict) # –û—Ç—Å–æ–µ–¥–∏–Ω—è—é üî∏
                else:
                    temp_text, bot_teil = text_from_admin.split('@') # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç
                    halb_spam = await message_sender(temp_text, lan, temp_dict)
                    spam = halb_spam +'\n\n@'+bot_teil
                try:
                    decorated_spam ='üî∏ '+spam
                    await cb.bot.send_message(chat_id=chat_id, text=decorated_spam)
                except TelegramForbiddenError:
                    pass
                except Exception as ex:
                    print(f'Admin sending exception happend  {ex}')
                await asyncio.sleep(0.2)  # –ñ–¥—É 0.2 —Å–µ–∫—É–Ω–¥—ã
            temp_dict.clear()
            await cb.message.answer('Mailing done')
            await dialog_manager.done()


admin_dialog = Dialog(
    Window(
        Const('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å–≤—Ç–∏—è'),
        Next(
                    text=Const('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞–º'),
                    id='send_msg'),
        Row(
            Button(
                text=Const('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ë–î'),
                id='zagruz_bd',
                on_click=button_zagruz_db),
            Button(
                text=Const('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ë–î'),
                id='save_bd',
                on_click=button_save_db),
            ),

        state=ADMIN.first
    ),
    Window(  # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å data
        Const(text='–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'),
        Cancel(
                text=Const('‚óÄÔ∏è'),
                id='admin_out_1',
                ),
        MessageInput(
            func=accepet_admin_message,
            content_types=ContentType.TEXT,
        ),
        state=ADMIN.accept_msg
    ),
    Window(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞–º
        Const('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â—É—Ö—É'),
        Row(Cancel(
                text=Const('‚óÄÔ∏è'),
                id='admin_out_2',
                ),
            Button(
                text=Const('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞–º'),
                id='send_msg_fin',
                on_click=sending_msg)),
        state=ADMIN.admin_send_msg)
)













